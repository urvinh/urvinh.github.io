<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-06-10T12:56:40+00:00</updated><id>/feed.xml</id><title type="html">ZEIT</title><subtitle>tips and tools</subtitle><entry><title type="html">Moving from Travis CI to GitHub Actions</title><link href="/travis-ci-to-github-actions" rel="alternate" type="text/html" title="Moving from Travis CI to GitHub Actions" /><published>2020-06-10T09:00:00+00:00</published><updated>2020-06-10T09:00:00+00:00</updated><id>/travis-ci-to-github-actions</id><content type="html" xml:base="/travis-ci-to-github-actions">&lt;p&gt;As you may already know, for this website, I’m using Jekyll with the help with some automations from Travis CI for the past two years. Because that’s what the theme developer had recommended. But recently, Travis has decided to combine travis-ci.org and travis-ci.com and I had some problems with the migration to travis-ci.com. Authentication seemed never working. After many frustrated attempts to fix it, I decided to move to something else. There are so many options, but since I’m using GitHub, why not use the in-house solution, GitHub Actions.&lt;/p&gt;

&lt;h1 id=&quot;lets-get-started&quot;&gt;Let’s get started…&lt;/h1&gt;
&lt;p&gt;In my limited knowledge of GitHub Actions, I know there will have to be a &lt;em&gt;config file&lt;/em&gt;, just like Travis. It should be located at &lt;strong&gt;.github/workflows/&lt;/strong&gt;. The file should be in YAML format and the name shouldn’t matter. In my case, it’s &lt;em&gt;main.yml&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you create it from the GitHub user interface, the sample file will look like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# This is a basic workflow to help you get started with Actions&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CI&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Controls when the action will run. Triggers the workflow on push or pull request&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# events but only for the master branch&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# A workflow run is made up of one or more jobs that can run sequentially or in parallel&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This workflow contains a single job called &quot;build&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# The type of runner that the job will run on&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Steps represent a sequence of tasks that will be executed as part of the job&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Runs a single command using the runners shell&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run a one-line script&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo Hello, world!&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Runs a set of commands using the runners shell&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Run a multi-line script&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;echo Add other actions to build,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;echo test, and deploy your project.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s quite easy to understand. But the theme I’m using is deeply written for Travis integration. At first, I didn’t know it so I get a lot of issue when copying and pasting from Travis config file. The tasks here are very simple, when there is a push action to a branch on GitHub, combine and build production files for the website and push it back to master branch. For hours, I had stuck at anthentication steps. I had tried some available actions in the marketplace but it doesn’t work like I intend. Then, I checked Jekyll theme source, it was deeply written for Travis and I have to make some changes to it so that I can use it with GitHub Actions. And ta-da, after dozens of failed build, GitHub Actions finally showed green tick.&lt;/p&gt;</content><author><name>Vinh Pham</name></author><category term="dev" /><summary type="html">As you may already know, for this website, I’m using Jekyll with the help with some automations from Travis CI for the past two years. Because that’s what the theme developer had recommended. But recently, Travis has decided to combine travis-ci.org and travis-ci.com and I had some problems with the migration to travis-ci.com. Authentication seemed never working. After many frustrated attempts to fix it, I decided to move to something else. There are so many options, but since I’m using GitHub, why not use the in-house solution, GitHub Actions.</summary></entry><entry><title type="html">About my development environment</title><link href="/dev-environment" rel="alternate" type="text/html" title="About my development environment" /><published>2018-07-04T13:00:00+00:00</published><updated>2018-07-04T13:00:00+00:00</updated><id>/dev-environment</id><content type="html" xml:base="/dev-environment">&lt;p&gt;It’s been a while since I write or develop something. A year… perhap. Maybe it’s time to update that article that I writed on Medium about my dev environment…&lt;/p&gt;

&lt;p&gt;Spoilers alert! It’s not as that fancy as the cover image that I use above.&lt;/p&gt;

&lt;p&gt;So a year has passed. As the times change, people change, and so do their tools. In the web development world, even a month can make you surprised at how thing are different compare to one month ealier. But now I talk about one year… one whole year…&lt;/p&gt;

&lt;p&gt;One year later, I still use WSL or formerly Bash on Windows. Surprise, surprise. Some may say, “Ugh! This guy is nut. WSL sucks… blah… blah…” But nah… Thing’s still going great with WSL, Microsoft even put many Linux distros on Microsoft Store now to make the installation process easier. And there’s even an terminal app for Windows 10 that look this cool, making using it such a joy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018/Jul/fl-terminal.png&quot; alt=&quot;Fluent Terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can even choose light theme. BAAM!&lt;/p&gt;

&lt;p&gt;So… what’s this terminal’s name again? It’s &lt;strong&gt;Fluent Terminal&lt;/strong&gt; by felixse, you can check it out at &lt;a href=&quot;https://github.com/felixse/FluentTerminal&quot;&gt;https://github.com/felixse/FluentTerminal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s talk about text editor. Yes, I still use Visual Studio Code because it’s too perfect.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018/Jul/vscode.png&quot; alt=&quot;Visual Studio Code&quot; /&gt;&lt;/p&gt;</content><author><name>Vinh Pham</name></author><category term="dev" /><summary type="html">It’s been a while since I write or develop something. A year… perhap. Maybe it’s time to update that article that I writed on Medium about my dev environment…</summary></entry><entry><title type="html">Set and use Zsh as default shell in WSL</title><link href="/set-zsh-wsl" rel="alternate" type="text/html" title="Set and use Zsh as default shell in WSL" /><published>2018-07-04T08:00:00+00:00</published><updated>2018-07-04T08:00:00+00:00</updated><id>/set-zsh-wsl</id><content type="html" xml:base="/set-zsh-wsl">&lt;p&gt;It isn’t that hard…&lt;/p&gt;

&lt;p&gt;A few months ago, I wrote an article to show how to get Zsh in WSL on Windows 10. But I haven’t exactly shown how to make it the default shell. In facts, you can’t (not the “official” way anyway), because bash.exe in System32 folder is meant to call bash shell, not zsh. So no matter how you try to set zsh as the default shell through chsh -s $(which zsh), it doesn’t work if you still call to bash.exe everytime you use WSL.&lt;/p&gt;

&lt;p&gt;Knowing this, the WSL team has made some changes. In the recent Windows 10 Insider builds for Windows 10 Fall Creator Update, there’s a &lt;strong&gt;wsl.exe&lt;/strong&gt; file in System32 which performs two functions &lt;a href=&quot;https://github.com/Microsoft/BashOnWindows/issues/846#issuecomment-300836949&quot;&gt;according to a member of the WSL team&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When run without arguments, it will launch your default user’s default shell (which is configurable via the chsh command).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When run with arguments, it is an easy way to run a specific Linux binary (wsl.exe ls).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So that means you can actually use the true default shell now if you call to &lt;strong&gt;wsl.exe&lt;/strong&gt; instead of &lt;strong&gt;bash.exe&lt;/strong&gt;. Here’re examples, Hyper Terminal and Visual Studio Code. First of all, you have to set zsh as the default shell, (obviously). Type this to the current WSL terminal you’re using (like “Bash on Ubuntu on Windows”)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chsh -s $(which zsh)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now back to Hyper, edit the settings file where the &lt;strong&gt;shell&lt;/strong&gt; and &lt;strong&gt;shellArgs&lt;/strong&gt; options are like this&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shell: 'C:\\Windows\\System32\\wsl.exe',
shellArgs: [],
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2018/Jul/fl-terminal.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s Hyper, how about Visual Studio Code? It’s the same. Just change “bash.exe” to “wsl.exe” in the settings file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\Windows\\sysnative\\wsl.exe&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There we go! Everything should work fine now.&lt;/p&gt;</content><author><name>Vinh Pham</name></author><category term="wsl" /><summary type="html">It isn’t that hard…</summary></entry><entry><title type="html">Welcome to Zeit</title><link href="/welcome" rel="alternate" type="text/html" title="Welcome to Zeit" /><published>2018-07-04T02:00:00+00:00</published><updated>2018-07-04T02:00:00+00:00</updated><id>/welcome</id><content type="html" xml:base="/welcome">&lt;p&gt;Hey! Welcome to Zeit, it’s great to have you :)&lt;/p&gt;</content><author><name>Vinh Pham</name></author><category term="Getting started" /><summary type="html">Hey! Welcome to Zeit, it’s great to have you :)</summary></entry></feed>